#!/bin/bash
help() {
    echo "NAME"
    echo "    dep - deploy war generated by maven java server project to specified tomcat server"
    echo
    echo "SYNOPSIS"
    echo "    dep [-t tag] [-m mave_module] [-f profile] [-w output_war] [-d deploy_path] [-r rollback_index] [-lh] index"
    echo
    echo "DESCRIPTION"
    echo "    dep build the project according to given git repo and deploy the output war into the specified server place. it's suggested to config the git and server info into ~/.deprc."
    echo "    format:"
    echo "           git_url:mave_module:profile:output_war:server_ip:username:password:deploy_path:war_in_tomcat:tomcat_home"
    echo
    echo "OPTIONS"
    echo "    with the following option to replace the config selected by index"
    echo "    -h help"
    echo "    -l build project locally and upload the war"
    echo "    -g git_url, without username and password, we could git clone it"
    echo "    -t git tag"
    echo "    -m mave module path, the relative path which we need cd into for build project"
    echo "    -f maven building profile, as development or production"
    echo "    -o output_war, that is generated after the building is done"
    echo "    -d deploy_path, where we need to copy the war to"
    echo "    index, the deploy config index. one line one config"
    echo
}

list() {
    echo list function is not implemented now
}

# .deprc is valid or not
    if [ -f ~/.deprc ]; then
        echo "load [~/.deprc]"
    else
        echo "~/.deprc is not existing. exit"
        exit
    fi

    all=(`cat ~/.deprc | awk -F, '{print $1}'`)
    N=${#all[@]}
    if [ $N -lt 1 ]; then
        echo "no configuration in ~/.deprc. exit"
        exit
    fi

# show choice
    cat ~/.deprc | awk -F, '{print "\t"FNR") "$1"\t"$2}'
    echo -n "select config index: "
    read idx
    if [ "$idx" = "" ]; then
        echo "set index=1"
        idx=1
    fi

    cfg=`cat ~/.deprc | head -n$idx | tail -n1`
    echo $cfg
    git=`echo $cfg | awk -F, '{print "\""$1"\""}'`
    mod=`echo $cfg | awk -F, '{print "\""$2"\""}'`
    pdt=`echo $cfg | awk -F, '{print "\""$3"\""}'`
    war=`echo $cfg | awk -F, '{print "\""$4"\""}'`
    sip=`echo $cfg | awk -F, '{print "\""$5"\""}'`
    iip=`echo $cfg | awk -F, '{print "\""$6"\""}'`
    usr=`echo $cfg | awk -F, '{print "\""$7"\""}'`
    psw=`echo $cfg | awk -F, '{print "\""$8"\""}'`
    dep=`echo $cfg | awk -F, '{print "\""$9"\""}'`
    raw=`echo $cfg | awk -F, '{print "\""$10"\""}'`
    tmc=`echo $cfg | awk -F, '{print "\""$11"\""}'`
    bak=`echo $cfg | awk -F, '{print "\""$12"\""}'`
    tag="master"

    if [ "$raw" = '""' ]; then
        raw=$dep
    fi

#   echo "git=${git}"
#   echo "tag=${tag}"
#   echo "mod=${mod}"
#   echo "pdt=${pdt}"
#   echo "war=${war}"
#   echo "sip=${sip}"
#   echo "iip=${iip}"
#   echo "usr=${usr}"
#   echo "psw=${psw}"
#   echo "dep=${dep}"
#   echo "raw=${raw}"
#   echo "tmc=${tmc}"
#   echo "bak=${bak}"

# process options
    while getopts "hlt:m:f:w:d:" arg
    do
        case $arg in
            h)
                help
                ;;
            l)
                list
                ;;
            t)
                tag=$OPTARG
                ;;
            m)
                mod=$OPTARG
                ;;
            f)
                pdt=$OPTARG
                ;;
            w)
                war=$OPTARG
                ;;
            d)
                dep=$OPTARG
                ;;
        esac
    done

    echo "git=${git}"
    echo "mod=${mod}"
    echo "pdt=${pdt}"
    echo "war=${war}"
    echo "sip=${sip}"
    echo "iip=${iip}"
#   echo "usr=${usr}"
#   echo "psw=${psw}"
    echo "dep=${dep}"
    echo "raw=${raw}"
    echo "tmc=${tmc}"

    # make sure $1 is index now
    shift $((OPTIND-1))


################################################################################
# ada_auto_deploy
################################################################################
sum=

git=${git//\"/}
mod=${mod//\"/}
pdt=${pdt//\"/}
war=${war//\"/}
sip=${sip//\"/}
iip=${iip//\"/}
usr=${usr//\"/}
psw=${psw//\"/}
dep=${dep//\"/}
raw=${raw//\"/}
tmc=${tmc//\"/}
bak=${bak//\"/}

bak="$bak/${dep//\//_}.`date +%Y%m%d%H%M%S`"

echo "git=${git}"
echo "mod=${mod}"
echo "pdt=${pdt}"
echo "war=${war}"
echo "sip=${sip}"
echo "iip=${iip}"
echo "usr=${usr}"
echo "psw=${psw}"
echo "dep=${dep}"
echo "raw=${raw}"
echo "tmc=${tmc}"
echo "bak=${bak}"

alias cp=cp
alias rm=rm
################################################################################
# compile
################################################################################
echo "---set workspace---------------------------------------------------------"
if [ -f ~/.ads ]; then
    echo "~/.ads is a file. exit"
    exit
fi

if [ ! -d ~/.ads ]; then
    mkdir -p ~/.ads
fi

cd ~/.ads
if [ ! $? = 0 ]; then
    # workspace erro
    echo "ERROR>> can't cd into ~/.ads"
    exit
fi

echo "---update git project----------------------------------------------------"
# we assume git project always could be pull.
# so, if it's existing, we don't clone it again
project=`echo $git | awk -F/ '{print $4}'`
project=${project//\"/}

echo project=$project
if [ ! -d $project ]; then
    echo "git clone $git"
    git clone $git $project
else
    echo "git project is existing"
    cd $project
    if [ $? = 0 ]; then
        echo "delete all files under git project dir"
        rm -fr ./*
        echo "check out all files under git project dir"
        git checkout .
        cd ..
    fi
fi

cd $project
echo "git pull to update git project"
git checkout master
status=`git pull origin master`
status=`git pull origin master`
if [ ! "$status" = "Already up-to-date." ]; then
    echo "ERROR>> git pull error, failed to pull down git project."
    exit
else
    echo $status
fi

if [ "$tag" = "master" ]; then
    echo "master is prepared well"
else
    git tag | grep $tag
    if [ $? = 0 ]; then
        echo "git checkout $tag"
        git checkout $tag
    fi
fi

echo "---check git version-----------------------------------------------------"
ver=`git show | grep "^commit " | awk '{print $2}'`
touch ../$project.ver
old=`cat ../$project.$sip.ver`
echo $ver > ../$project.$sip.ver

echo "old submit: $old"
echo "new submit: $ver"
if [ "$ver" = "$old" ]; then
    echo "no new submit found for building to deploy $sip"
    echo "ERROR>> no new submit found for building to deploy $sip"
    exit
fi

echo "---build war-------------------------------------------------------------"
echo "mod=$mod"
if [ ! "$mod" = "" ]; then
    cd "$mod"
fi

    echo "pwd=`pwd`"
    log=~/.ads/ads_build.log
    echo "build $project log" > $log
    echo "mvn package -P$pdt"
    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
    mvn package -P$pdt -Dmaven.test.skip=true | tee -a $log 2>&1
    echo "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    echo "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
    if [ -d ~/ins/tmc/webapps/ROOT ]; then
        echo "cat $log > ~/ins/tmc/webapps/ROOT/ads.log"
        cat $log > ~/ins/tmc/webapps/ROOT/ads.log
    else
        echo "~/ins/tmc/webapps/ROOT is not existing for ads.log"
    fi

if [ ! "$mod" = "" ]; then
    cd ..
fi

grep 'BUILD SUCCESS' $log
if [ $? = 0 ]; then
    echo "mvn package successfully done!"
    war=`grep 'Building war' $log | grep "$war" | awk '{print $4}'`
    if [ $? = 0 ]; then
        echo "war=$war"
        if [ -f /usr/bin/shasum ]; then
            sum=`shasum $war | awk '{print $1}'`
            echo "shasum $sum"
        fi
    else
        echo "ERROR>> no war log in building log"
        exit
    fi
else
    echo "ERROR>> mvn package failed"
    exit
fi


################################################################################
# scp war to server
################################################################################
echo "---scp war to server-----------------------------------------------------"
sfx=.upload

#   echo "war=$war"
#   echo "usr=$usr"
#   echo "sip=$sip"
    #   echo "iip=$iip"
#   echo "dep=$dep"
#   echo "psw=$psw"
#   echo "sfx=$sfx"
ads_copy $war $usr $sip $dep $psw $sfx
################################################################################
# backup
################################################################################
echo "---backup war------------------------------------------------------------"
#   echo "usr=$usr"
#   echo "sip=$sip"
    #   echo "iip=$iip"
#   echo "psw=$psw"
#   echo "dep=$dep"
#   echo "bak=$bak"
ads_backup $usr $sip $psw $dep $bak

################################################################################
# reboot tomcat
################################################################################
echo "---reboot tomcat---------------------------------------------------------"
sfx=.upload

#   echo "usr=$usr"
#   echo "sip=$sip"
    #   echo "iip=$iip"
#   echo "psw=$psw"
#   echo "tmc=$tmc"
#   echo "raw=$raw"
#   echo "dep=$dep"
#   echo "sfx=$sfx"
ads_reboot $usr $sip $psw $tmc $raw $dep $sfx







